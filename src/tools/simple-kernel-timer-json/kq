#!/usr/bin/env python
from __future__ import print_function
import sys
import argparse
import json
import datetime as dt
import numpy as np
import pwd
from sosdb import Sos

class KokkosData(object):
    def __init__(self):
        self.db = None

    def open(self, path):
        try:
            self.db = Sos.Container(path, Sos.PERM_RW)
            self.app_schema = self.db.schema_by_name('kokkos_app')
            if self.app_schema is None:
                printf("The {0} database is not a Kokkos Data Store.".format(path))
                self.db.close()
                return False
            self.kernel_schema = self.db.schema_by_name('kokkos_kernel')
            if self.app_schema is None:
                printf("The {0} database is not a Kokkos Data Store.".format(path))
                self.db.close()
                return False
            self.sha256_schema = self.db.schema_by_name('sha256_string')
            if self.sha256_schema is None:
                printf("The {0} database is not a Kokkos Data Store.".format(path))
                self.db.close()
                return False
            self.sha256_attr = self.sha256_schema['sha256']
            self.sha256_idx = Sos.Index(self.sha256_attr)
            self.sha256_key = Sos.Key(attr=self.sha256_attr)
        except:
            pass
        return True

    def close(self):
        if self.db:
            self.db.close()
            self.db = None

    def show_strings(self, args):
        f = Sos.Filter(k.sha256_attr)
        s = f.begin()
        print("{0:64} {1}".format("SHA256 Key", "String"))
        print("{0:64} {1}".format("-".ljust(64, "-"), "-".ljust(79-64, "-")))
        while s:
            inst = bytearray(s['sha256'])
            sha256 = ""
            for b in inst:
                sha256 = sha256 + "{0:2}".format(hex(b))[-2:]
            print("{0} {1}".format(sha256, s['string']))
            s = f.next()

    def get_app_filter(self, args):
        if args.job_id:
            idx_attr = self.app_schema['job_id']
        elif args.user_id:
            idx_attr = self.app_schema['user_id']
        else:
            idx_attr = self.app_schema['inst_job_app_time']
        f = Sos.Filter(idx_attr)
        if args.user_id:
            user_id_attr = self.app_schema['user_id']
            f.add_condition(user_id_attr, Sos.COND_EQ, args.user_id)
        if args.job_id is not None:
            job_id_attr = self.app_schema['job_id']
            f.add_condition(job_id_attr, Sos.COND_EQ, args.job_id)
        return f

    def _print_summary_header(self):
        print("{0:5} {1:10} {2:8} {3:20} {4:32}".format("Job", "Job Name",
                                                        "User", "Start Time",
                                                        "Instance Data"))
        print("{0:5} {1:10} {2:8} {3:20} {4:32}".format('-'.ljust(5, '-'),
                                                        '-'.ljust(10, '-'),
                                                        '-'.ljust(8, '-'),
                                                        '-'.ljust(20, '-'),
                                                        '-'.ljust(32, '-')))

    def _print_detail_header(self):
        print("    {0:12} {1:12} {2:12} {3:12} {4:12}"
              .format("Total Time", "Kernel Times", "Other Times", "% in Kernels", "Unique Kernels"))
        print("    {0:12} {1:12} {2:12} {3:12} {4:12}".format('-'.ljust(12, '-'),
                                                              '-'.ljust(12, '-'),
                                                              '-'.ljust(12, '-'),
                                                              '-'.ljust(12, '-'),
                                                              '-'.ljust(12, '-')))

    def _print_job_data(self, job, args):
        self.sha256_key.set_value(job['inst_data'])
        inst = self.sha256_idx.find(self.sha256_key)
        ts = dt.datetime.fromtimestamp(int(job['start_time']))
        try:
            uid = pwd.getpwuid(int(job['user_id'])).pw_name
        except:
            uid = job['user_id']
        print("{0:5} {1:10} {2:8} {3:20} {4}".format(job['job_id'],
                                                     job['job_name'],
                                                     uid,
                                                     str(ts),
                                                     inst['string']))

    def _print_job_detail(self, job, args):
        print("    {0:12.2f} {1:12.2f} {2:12.2f} {3:12.2f} {4:12.0f}".format(job['total_app_time'],
                                                         job['total_kernel_times'],
                                                         job['total_non_kernel_times'],
                                                         job['percent_in_kernels'],
                                                         job['unique_kernel_calls']))

    def show_job_data(self, args, job_id=None):
        if args.like and job_id is None:
            # Get the instance data for the job
            idx_attr = self.app_schema['job_id']
            f = Sos.Filter(idx_attr)
            f.add_condition(idx_attr, Sos.COND_EQ, args.job_id)
            o = f.begin()
            if o is None:
                print("Job {0} does not exist".format(args.job_id))
                sys.exit(1)

            inst_data = o['inst_data']
            idx_attr = self.app_schema['inst_job_app_time']
            f = Sos.Filter(idx_attr)
            inst_data_attr = self.app_schema['inst_data']
            f.add_condition(inst_data_attr, Sos.COND_EQ, inst_data)
        else:
            idx_attr = self.app_schema['job_id']
            f = Sos.Filter(idx_attr)

        if (args.job_id and not args.like) or job_id is not None:
            f.add_condition(self.app_schema['job_id'], Sos.COND_EQ, args.job_id)

        if args.user_id:
            f.add_condition(self.app_schema['user_id'], Sos.COND_EQ, args.user_id)

        f.unique()

        o = f.begin()
        if o is None:
            return
        self._print_summary_header()
        if args.detail:
            self._print_detail_header()
        while o:
            self._print_job_data(o, args)
            if args.detail:
                self._print_job_detail(o, args)
            o = f.next()
        print('')

    def show_rank_stats(self, args):
        self.show_job_data(args)

        idx_attr = self.app_schema['inst_job_app_time']
        f = Sos.Filter(idx_attr)
        f.add_condition(self.app_schema['job_id'], Sos.COND_EQ, args.job_id)
        ranks = f.count()
        if ranks == 0:
            return

        print("Rank Statistics\n")

        shape=[ 'mpi_rank',
                'total_app_time',
                'total_kernel_times',
                'total_non_kernel_times',
                'percent_in_kernels',
                'unique_kernel_calls' ]
        cnt, data = f.as_ndarray(ranks, shape=shape, order='index')

        mean_v = np.mean(data, axis=0)
        max_v = np.argmax(data, axis=0)
        min_v = np.argmin(data, axis=0)
        std_dev = np.std(data, axis=0)

        print("{0:24} {1:18} {2:18} {3:12} {4:12}"
              .format("Metric Name", "Min/Rank", "Max/Rank", "Mean", "Standard Dev"))
        print("{0:24} {1:18} {2:18} {3:12} {4:12}".format('-'.ljust(24, '-'),
                                                          '-'.ljust(18, '-'),
                                                          '-'.ljust(18, '-'),
                                                          '-'.ljust(12, '-'),
                                                          '-'.ljust(12, '-')))
        attr_id = 0
        for attr_name in shape:
            if attr_name != 'mpi_rank':
                print("{0:24} {1:18} {2:18} {3:12.2f} {4:12.6f}"
                      .format(attr_name,
                              "{0:12.2f}[{1}]".format(data[min_v[attr_id]][attr_id], int(data[min_v[attr_id]][0])),
                              "{0:12.2f}[{1}]".format(data[max_v[attr_id]][attr_id], int(data[max_v[attr_id]][0])),
                              mean_v[attr_id],
                              std_dev[attr_id]))
            attr_id += 1

        print()
        print("{0:24} {1}".format("Metric Name", "Ranks w/ value-mean > 2 Std-Dev"))
        print("{0:24} {1}".format('-'.ljust(24, '-'), '-'.ljust(32, '-')))

        low = []
        high = []
        for c in range(1, len(mean_v)):
            low.append(mean_v[c] - (2 * std_dev[c]))
            high.append(mean_v[c] + (2 * std_dev[c]))

        for c in range(1, len(mean_v)):
            ll = np.where(data[:,c] < low[c-1])
            hl = np.where(data[:,c] > high[c-1])
            line = "{0:24} ".format(shape[c])
            more = False
            for x in ll[0]:
                if more:
                    line += ", "
                line += "{0}".format(int(data[:,0][x]))
                more = True
            for x in hl[0]:
                if more:
                    line += ", "
                line += "{0}".format(int(data[:,0][x]))
                more = True
            if more:
                print(line)

    def get_matching_jobs(self, args):
        # Get the instance data for the similar job
        idx_attr = self.app_schema['job_id']
        f = Sos.Filter(idx_attr)
        f.add_condition(idx_attr, Sos.COND_EQ, args.job_id)
        o = f.begin()
        if o is None:
            print("Job {0} does not exist".format(args.job_id))
            sys.exit(1)

        inst_data = o['inst_data']
        idx_attr = self.app_schema['inst_job_app_time']

        # Build a new filter with this instance data as the key
        f = Sos.Filter(idx_attr)
        inst_data_attr = self.app_schema['inst_data']
        f.add_condition(inst_data_attr, Sos.COND_EQ, inst_data)
        if args.user_id:
            f.add_condition(self.app_schema['user_id'], Sos.COND_EQ, args.user_id)
        f.unique()
        count = f.count()
        shape = [ 'job_id' ]
        return f.as_ndarray(count, shape=shape, order='index')

    def show_job_stats(self, args):
        print("Comparison of Job {0} with Similar Jobs\n".format(args.job_id))
        if args.verbose:
            k.show_job_data(args)
        else:
            k.show_job_data(args, job_id=args.job_id)

        job_cnt, job_ids = self.get_matching_jobs(args)

        shape = [ 'job_id', 'start_time',
                  'total_app_time',
                  'total_kernel_times',
                  'total_non_kernel_times',
                  'percent_in_kernels',
                  'unique_kernel_calls' ]
        job_id_attr = self.app_schema['job_id']

        stats = np.zeros([ job_cnt, 8 ])
        job_id_row = 0
        job_id = float(args.job_id)
        for i in range(0, job_cnt):
            if job_id == job_ids[i]:
                job_id_row = i
            f = Sos.Filter(job_id_attr)
            f.add_condition(job_id_attr, Sos.COND_EQ, job_ids[i])
            count = f.count()
            cnt, data = f.as_ndarray(count, shape=shape, order='index')
            means = np.mean(data[:,range(1,7)], axis=0)
            stats[i][0] = data[0][0]
            for j in range(0,6):
                stats[i][j+1] = means[j]

        min_v = np.argmin(stats, axis=0)
        max_v = np.argmax(stats, axis=0)
        mean_v = np.mean(stats, axis=0)
        std_dev = np.std(stats, axis=0)

        print("{0:24} {1:12} {2:18} {3:18} {4:12} {5:12}"
              .format("Metric Name", "Job {0}".format(args.job_id), "Min/Job", "Max/Job", "Mean", "Standard Dev"))
        print("{0:24} {1:12} {2:18} {3:18} {4:12} {5:12}".format('-'.ljust(24, '-'),
                                                                 '-'.ljust(12, '-'),
                                                                 '-'.ljust(18, '-'),
                                                                 '-'.ljust(18, '-'),
                                                                 '-'.ljust(12, '-'),
                                                                 '-'.ljust(12, '-')))
        attr_id = 0
        for attr_name in shape:
            if attr_name == 'start_time' or attr_name == 'job_id':
                attr_id += 1
                continue

            print("{0:24} {1:12.2f} {2:18} {3:18} {4:12.2f} {5:12.2f}"
                  .format(attr_name,
                          stats[job_id_row][attr_id],
                          "{0:12.2f}[{1}]".format(stats[min_v[attr_id]][attr_id], int(stats[min_v[attr_id]][0])),
                          "{0:12.2f}[{1}]".format(stats[max_v[attr_id]][attr_id], int(stats[max_v[attr_id]][0])),
                          mean_v[attr_id],
                          std_dev[attr_id]))
            attr_id += 1

    def show_kernels(self, args):
        f = Sos.Filter(self.kernel_schema['inst_job_app_kernel_time'])
        if args.job_id:
            f.add_condition(self.kernel_schema['job_id'], Sos.COND_EQ, args.job_id)
        kernels = f.count()
        if kernels == 0:
            return

        print("\nKokkos Kernel Data\n")

        kernel = f.begin()
        last_sha = None
        print("{0:4} {1:5} {2:12} {3:12} {4:12}".format("Name", "Rank", "Count", "Total Time", "Time/Call"))
        print("{0:4} {1:5} {2:12} {3:12} {4:12}".format('-'.ljust(4,'-'),
                                                        '-'.ljust(5,'-'),
                                                        '-'.ljust(12,'-'),
                                                        '-'.ljust(12,'-'),
                                                        '-'.ljust(12,'-')))
        while kernel:
            sha = kernel['kernel_name']
            if last_sha != sha:
                self.sha256_key.set_value(sha)
                name = self.sha256_idx.find(self.sha256_key)['string']
                print(name)
                last_sha = sha
            print("{0:4} {1:5} {2:12} {3:12.4f} {4:12.4f}"
                  .format("", int(kernel['mpi_rank']), int(kernel['call_count']),
                          kernel['total_time'], kernel['time_per_call']))
            kernel = f.next()
        return

        shape=[ 'mpi_rank',
                'call_count',
                'total_time',
                'time_per_call' ]
        cnt, data = f.as_ndarray(kernels, shape=shape, order='index')
        mean_v = np.mean(data, axis=0)
        max_v = np.argmax(data, axis=0)
        min_v = np.argmin(data, axis=0)
        std_dev = np.std(data, axis=0)

        print("{0:24} {1:18} {2:18} {3:12} {4:12}"
              .format("Name", "Min/Rank", "Max/Rank", "Mean", "Standard Dev"))
        print("{0:24} {1:18} {2:18} {3:12} {4:12}".format('-'.ljust(24, '-'),
                                                          '-'.ljust(18, '-'),
                                                          '-'.ljust(18, '-'),
                                                          '-'.ljust(12, '-'),
                                                          '-'.ljust(12, '-')))
        attr_id = 0
        for attr_name in shape:
            if attr_name != 'mpi_rank':
                print("{0:24} {1:18} {2:18} {3:12.2f} {4:12.2f}"
                      .format(attr_name,
                              "{0:12.2f}/{1}".format(data[min_v[attr_id]][attr_id], int(data[min_v[attr_id]][0])),
                              "{0:12.2f}/{1}".format(data[max_v[attr_id]][attr_id], int(data[max_v[attr_id]][0])),
                              mean_v[attr_id],
                              std_dev[attr_id]))
            attr_id += 1
        print()

def need_job_id():
    print("--job_id must be specified")
    sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Query Kokkos Data")
    parser.add_argument("--path", required=True,
                        help="The path to the database.")
    parser.add_argument("--summary", required=False, action="store_true",
                        help="Show summary data for jobs")
    parser.add_argument("--detail", required=False, action="store_true",
                        help="Show detail data for jobs")
    parser.add_argument("--stats", action='store_true',
                        help="Compare performance across similar jobs.")
    parser.add_argument("--like", required=False, action="store_true",
                        help="Show jobs like --job_id")
    parser.add_argument("--job_id", required=False, type=int,
                        help="Show this job")
    parser.add_argument("--user", required=False,
                        help="Select jobs for a user.")
    parser.add_argument("--user_id", required=False, type=int,
                        help="Select jobs for a user id.")
    parser.add_argument("--kernels", action='store_true',
                        help="Show kernel data.")
    parser.add_argument("--strings", action='store_true',
                        help="Show strings and their keys.")
    parser.add_argument("--verbose", action='store_true',
                        help="Show extra detail.")
    args = parser.parse_args()

    k = KokkosData()
    if not k.open(args.path):
        print("The container {0} could not be opened.".format(args.path))

    if args.like and not args.job_id:
        print("--like requires the --job_id option")
        sys.exit(1)

    if args.user:
        try:
            uid = int(args.user)
        except ValueError:
            uid = pwd.getpwnam(args.user).pw_uid
        except:
            print("The user {0} could not be found".format(args.user))
        args.user_id = uid

    if args.summary or args.detail:
        k.show_job_data(args)

    if args.stats:
        if not args.job_id:
            need_job_id()
        if args.like:
            k.show_job_stats(args)
        else:
            k.show_rank_stats(args)

    if args.kernels:
        k.show_kernels(args)

    if args.strings:
        k.show_strings(args)

